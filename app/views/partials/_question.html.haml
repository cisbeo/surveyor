-# TODO: js for slider
- rg ||= nil
- renderer = q.renderer(g ||= nil)
- disabled = defined?(disableFlag) ? disableFlag : false
- unless q.display_type == "hidden"
  = f.inputs q_text(q, @render_context), :id => rg ? "q_#{q.id}_#{rg}" : "q_#{q.id}", :class => "q_#{renderer} #{q.css_class(@response_set)}" do
    %span.help= render_help_text(q, @render_context)
    - case renderer
    - when :image, :label
    - when :dropdown, :inline_dropdown, :default_dropdown, :slider, :repeater_dropdown
      - r = response_for(@response_set, q, nil, rg)
      - i = response_idx
      = f.semantic_fields_for i, r do |ff|
        = ff.input :question_id, :as => :hidden
        = ff.input :response_group, :as => :hidden, :value => rg if g && g.display_type == "repeater"
        = ff.input :api_id, :as => :hidden
        = ff.input :answer_id, :as => :radio_buttons, :collection => q.answers.map{|a| [a.text, a.id]}, :include_blank => (renderer != :slider), :label => q.text, :input_html => { :disabled => disabled }
    - else # :default, :inline, :inline_default
      - if q.pick == "one"
        - r = response_for(@response_set, q, nil, rg)
        - i = response_idx  # increment the response index since the answer partial skips for q.pick == one
        = f.semantic_fields_for i, r do |ff|
          = ff.input :question_id, :as => :hidden
          = ff.input :response_group, :as => :hidden, :value => rg if g && g.display_type == "repeater"
          = ff.input :api_id, :as => :hidden
      - q.answers.each do |a|
        - next if (q.pick == "one" or q.pick == "any") and disabled and @response_set.responses.where( :question_id => q.id, :answer_id => a.id).empty?
        = render a.custom_renderer || '/partials/answer', :q => q, :a => a, :f => f, :rg => rg, :g => g, :disableFlag => disabled
